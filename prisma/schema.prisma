generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["tracing"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Users {
    id             Int              @id @default(autoincrement())
    userName       String           @db.VarChar(20)
    phoneNumber    String           @unique @db.VarChar(10)
    email          String?          @unique @db.VarChar(50)
    occupation     UsersOccupation
    calls          Boolean          @default(true)
    messages       Boolean          @default(true)
    imageUrl       String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    cattle         Cattle[]
    myposts        MyPosts[]
    wishlist       Wishlist[]
    farmtools      Tools[]
    harvest        Harvest[]
    transportation Transportation[]
    veterinary     Veterinarian?
    vetRating      VetRating[]
    technician     Technicians?
    techRating     TechRating[]

    @@unique([email, phoneNumber])
    @@index([phoneNumber])
    @@map("users")
}

model Otp {
    id          Int      @id @default(autoincrement())
    hashedOtp   String   @db.VarChar(255)
    phoneNumber String   @db.VarChar(10)
    createdAt   DateTime @default(now())

    @@index([phoneNumber])
    @@map("otps")
}

model Cattle {
    id              Int             @id @default(autoincrement())
    type            CattleType
    name            String? // Nullable for optional cattle names
    description     String
    price           String
    location        String
    latitude        Float
    longitude       Float
    status          ActiveStatus    @default(Active)
    deliveryOptions DeliveryOptions @default(Self_pickup)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    postedById Int
    users      Users          @relation(fields: [postedById], references: [id], onDelete: Cascade)
    images     CattleImages[]

    // Indexes
    @@index([latitude, longitude, updatedAt])
    @@index([type])
    @@index([name])
    @@index([postedById], map: "cattle_postedById_fkey")
    @@map("cattle")
}

model CattleImages {
    id        Int      @id @default(autoincrement())
    url       String
    createdAt DateTime @default(now())
    cattleId  Int
    cattle    Cattle   @relation(fields: [cattleId], references: [id], onDelete: Cascade)

    @@index([cattleId], map: "cattle_images_cattleId_fkey")
    @@map("cattle_images")
}

enum CattleType {
    Cow
    Bull
    Buffalo
    Sheep
    Goat
    Hen
    Dog
    Others
}

enum UsersOccupation {
    Farmer
    Electrician
    Veterinary
    Mechanic
    Guest
}

enum ActiveStatus {
    Active
    Inactive
}

enum ItemType {
    Cattle
    Tools
    Harvest
    Transportation
}

enum ToolType {
    Machinery
    Sprayers
    Safety
    Irrigation
    Others
}

enum Condition {
    New
    Used
    Refurbished
}

enum DeliveryOptions {
    Self_pickup
    Delivery_available
}

model MyPosts {
    id        Int      @id @default(autoincrement())
    userId    Int
    itemType  ItemType // Can be 'CATTLE', 'TOOL', etc.
    itemId    Int // ID from the corresponding product table
    createdAt DateTime @default(now())

    user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, itemId, itemType])
    @@index([userId, itemType])
    @@map("myposts")
}

model Wishlist {
    id       Int      @id @default(autoincrement())
    userId   Int
    itemType ItemType
    itemId   Int
    user     Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, itemId, itemType])
    @@index([userId, itemType])
    @@map("wishlist")
}

model Tools {
    id              Int             @id @default(autoincrement())
    name            String
    type            ToolType
    description     String
    price           String
    location        String
    latitude        Float
    longitude       Float
    status          ActiveStatus    @default(Active)
    deliveryOptions DeliveryOptions @default(Self_pickup)

    //metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //relations
    postedById Int
    postedBy   Users         @relation(fields: [postedById], references: [id], onDelete: Cascade)
    images     ToolsImages[]

    @@index([latitude, longitude, updatedAt])
    @@index([name])
    @@index([type])
    @@index([postedById], map: "farm_tools_postedById_fkey")
    @@map("tools")
}

model ToolsImages {
    id        Int      @id @default(autoincrement())
    url       String
    createdAt DateTime @default(now())
    toolId    Int
    tool      Tools    @relation(fields: [toolId], references: [id], onDelete: Cascade)

    @@index([toolId], map: "farm_tool_images_farmToolId_fkey")
    @@map("tools_images")
}

model Harvest {
    id              Int             @id @default(autoincrement())
    name            String
    type            HarvestType
    description     String
    price           String
    location        String
    latitude        Float
    longitude       Float
    status          ActiveStatus    @default(Active)
    deliveryOptions DeliveryOptions @default(Self_pickup)

    //metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //relations
    postedById Int
    postedBy   Users           @relation(fields: [postedById], references: [id], onDelete: Cascade)
    images     HarvestImages[]

    @@index([latitude, longitude, updatedAt])
    @@index([name])
    @@index([type])
    @@index([postedById], map: "farm_tools_postedById_fkey")
    @@map("harvest")
}

model HarvestImages {
    id        Int      @id @default(autoincrement())
    url       String
    createdAt DateTime @default(now())
    harvestId Int
    harvest   Harvest  @relation(fields: [harvestId], references: [id], onDelete: Cascade)

    @@index([harvestId])
    @@map("harvest_images")
}

model Transportation {
    id          Int          @id @default(autoincrement())
    name        String?
    type        VechileType
    description String
    price       String
    location    String
    latitude    Float
    longitude   Float
    status      ActiveStatus @default(Active)

    //metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //relations
    postedById Int
    postedBy   Users                  @relation(fields: [postedById], references: [id], onDelete: Cascade)
    images     TransportationImages[]

    @@index([latitude, longitude, updatedAt])
    @@index([type])
    @@index([postedById], map: "farm_tools_postedById_fkey")
    @@map("transportation")
}

model TransportationImages {
    id               Int            @id @default(autoincrement())
    url              String
    createdAt        DateTime       @default(now())
    transportationId Int
    trasnportation   Transportation @relation(fields: [transportationId], references: [id], onDelete: Cascade)

    @@index([transportationId])
    @@map("transportation_images")
}

enum VechileType {
    Lorry
    Truck
    Tractor
    Auto
    Others
}

enum HarvestType {
    Vegetables
    Fruits
    Spices
    Plants
    Seeds
    Manure
    Grass
    Crops
}

enum VetSpecialty {
    General
    Surgeon
    Nutrition
}

enum TechType {
    Electrician
    Mechanic
}

model Veterinarian {
    id            Int          @id @default(autoincrement())
    userId        Int          @unique // Connects to registered user
    user          Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
    specialty     VetSpecialty @default(General) // Enum for area of expertise
    experience    String // Number of years of experience
    verified      Boolean      @default(false)
    availability  Boolean      @default(true)
    location      String
    latitude      Float?
    longitude     Float?
    imageUrl      String?
    ratings       VetRating[]
    averageRating Float?       @default(0)
    ratingCount   Int          @default(0)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@index([latitude, longitude, updatedAt])
    @@index(userId)
    @@index(verified)
    @@map("veterinarian")
}

model VetRating {
    id             Int          @id @default(autoincrement())
    userId         Int // ID of user giving the rating
    veterinarianId Int // ID of veterinarian being rated
    user           Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
    veterinarian   Veterinarian @relation(fields: [veterinarianId], references: [id], onDelete: Cascade)
    rating         Int
    comment        String?
    createdAt      DateTime     @default(now())

    @@index(userId)
    @@index(veterinarianId)
    @@map("vet_ratings")
}

model Technicians {
    id            Int          @id @default(autoincrement())
    userId        Int          @unique // Connects to registered user
    user          Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
    type          TechType     @default(Electrician)
    experience    String // Number of years of experience
    location      String
    latitude      Float?
    longitude     Float?
    availability  Boolean      @default(true)
    imageUrl      String?
    ratings       TechRating[]
    averageRating Float?       @default(0)
    ratingCount   Int          @default(0)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@index([latitude, longitude, updatedAt])
    @@index(userId)
    @@index(type)
    @@map("technicians")
}

model TechRating {
    id           Int         @id @default(autoincrement())
    userId       Int // ID of user giving the rating
    technicianId Int // ID of veterinarian being rated
    user         Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
    technician   Technicians @relation(fields: [technicianId], references: [id], onDelete: Cascade)
    rating       Int
    comment      String?
    createdAt    DateTime    @default(now())

    @@index(userId)
    @@index(technicianId)
    @@map("tech_ratings")
}
